    public function save_vote_ws(Request $request){
        try {
           

            $event = Event::findOrFail($request->get('data')['eventId']);
            if(!isset($event->id))
                return response()
                ->json(['status' => false, 'data' => array('error'=>'EvÃ¨nement introuvable.')],203);

                $user = Voter::findOrFail($request->get('data')['userId']);

            $project = Project::where(['id' => $request->get('data')['projectId'], 'event_id' => $event->id])->first();
            if(!isset($project->id))
                return response()
                ->json(['status' => false, 'data' => array('error'=>'Projet introuvable.')],203);

            $projectId = $project->id;
 
            if(isset($user->id)){
                if($user->status == 1){
                    $user->votes()->detach();
                    foreach ($request->get('data')['notes'] as $id_criteria => $value) {
                       
                        if($criteria = Criteria::find($id_criteria)){
                            if($value >= 0){
                                $user->votes()->attach([
                                    $projectId => [
                                        'note' => $value,
                                        'criteria_id' => $id_criteria
                                    ]
                                ]);
                            }
                        }else{
                            return response()
                            ->json(['status' => false, 'data' => array('error'=>'CritÃ©re introuvable.')],203);
                        }
                    }
                    return response()
                    ->json(['status' => true],200);
                }else{
                    return response()
                    ->json(['status' => false, 'data' => array('error'=>'Compte bloquÃ©.')],203);
                }
            } else {
                return response()
                ->json(['status' => false, 'data' => array('error'=>'Utilisateur introuvable.')],203);
            }

        }catch( \Illuminate\Validation\ValidationException $e ){
            return response()
            ->json(['status' => false, 'data' => array('error'=>'Un paramÃ¨tre manquant.'.$request->get('data')['notes'])],203);
        } catch (\Exception $e) {
            return response()
            ->json(['status' => false, 'data' => array('error'=>'Une erreur s\'est produite.'.$e->getMessage()())],500);
        } 
    }